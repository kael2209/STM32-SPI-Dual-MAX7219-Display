#ifndef _MAX7219_H_
#define _MAX7219_H_

// Ð?nh nghia d?a ch? các thanh ghi c?a MAX7219
#define MAX7219_REG_NOOP        	0x00  // Không th?c hi?n hành d?ng
#define MAX7219_REG_DIGIT0      	0x01  // Thanh ghi cho LED 7 do?n 0
#define MAX7219_REG_DIGIT1      	0x02  // Thanh ghi cho LED 7 do?n 1
#define MAX7219_REG_DIGIT2      	0x03  // Thanh ghi cho LED 7 do?n 2
#define MAX7219_REG_DIGIT3      	0x04  // Thanh ghi cho LED 7 do?n 3
#define MAX7219_REG_DIGIT4      	0x05  // Thanh ghi cho LED 7 do?n 4
#define MAX7219_REG_DIGIT5      	0x06  // Thanh ghi cho LED 7 do?n 5
#define MAX7219_REG_DIGIT6      	0x07  // Thanh ghi cho LED 7 do?n 6
#define MAX7219_REG_DIGIT7      	0x08  // Thanh ghi cho LED 7 do?n 7
#define MAX7219_REG_DECODE_MODE 	0x09  // Ch? d? gi?i mã BCD
#define MAX7219_REG_INTENSITY   	0x0A  // Ð? sáng
#define MAX7219_REG_SCAN_LIMIT  	0x0B  // S? lu?ng digit quét
#define MAX7219_REG_SHUTDOWN    	0x0C  // B?t/t?t hi?n th?
#define MAX7219_REG_DISPLAY_TEST 	0x0F 	// Ch? d? ki?m tra hi?n th?

// Giá tr? cho thanh ghi DECODE_MODE
#define MAX7219_DECODE_NONE     0x00  // Không gi?i mã, di?u khi?n bit tr?c ti?p
#define MAX7219_DECODE_ALL      0xFF  // Gi?i mã BCD cho t?t c? 8 digit

// Giá tr? cho thanh ghi INTENSITY (d? sáng)
#define MAX7219_INTENSITY_MIN   0x00  // Ð? sáng th?p nh?t
#define MAX7219_INTENSITY_MAX   0x0F  // Ð? sáng cao nh?t

// Giá tr? cho thanh ghi SCAN_LIMIT
#define MAX7219_SCAN_1_DIGIT    0x00  // Quét 1 digit
#define MAX7219_SCAN_8_DIGIT    0x07  // Quét 8 digit

// Giá tr? cho thanh ghi SHUTDOWN
#define MAX7219_SHUTDOWN_OFF    0x00  // T?t hi?n th?
#define MAX7219_SHUTDOWN_ON     0x01  // B?t hi?n th?

// Giá tr? cho thanh ghi DISPLAY_TEST
#define MAX7219_TEST_OFF        0x00  // T?t ch? d? ki?m tra
#define MAX7219_TEST_ON         0x01  // B?t ch? d? ki?m tra (t?t c? LED sáng)

#include <stdint.h>

static const uint8_t score_array_start[][8] = 
{
	{0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF},
	{0xF, 0xF, 0xF, 10, 10, 0xF, 0xF, 0xF},
	{0xF, 0xF, 10, 10, 10, 10, 0xF, 0xF},
	{0xF, 10, 10, 10, 10, 10, 10, 0xF},
	{10, 10, 10, 10, 10, 10, 10, 10},
};
static const uint8_t score_array_end[][8] = 
{
	{0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF},
	{10, 0xF, 0xF, 0xF, 0xF, 0xF, 0xF, 10},
	{10, 10, 0xF, 0xF, 0xF, 0xF,10, 10},
	{10, 10, 10, 0xF, 0xF, 10, 10, 10},
	{10, 10, 10, 10, 10, 10, 10, 10},
};
static const uint8_t heart_half[8]={0x00,0x66,0xBD,0x99,0x42,0x24,0x18, 0x00};
static const uint8_t heart[8] = {0x00, 0x66, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00};
static const uint8_t heart_start[8][8] = 
{
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
	{0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 },
	{0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00 },
	{0x00, 0x18, 0x3C, 0x7E, 0x7E, 0x3C, 0x18, 0x00 },
	{0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x3C, 0x18 },
	{0x3C, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0x3C },
	{0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E },
	{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF },
};

static const char ASCII[][8] = 
{
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, // Space (32)
    {0x18,0x18,0x18,0x18,0x00,0x18,0x00,0x00}, // ! (33)
    {0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00}, // " (34)
    {0x24,0x7E,0x24,0x24,0x7E,0x24,0x00,0x00}, // # (35)
    {0x18,0x3E,0x60,0x3C,0x06,0x7C,0x18,0x00}, // $ (36)
    {0x62,0x64,0x08,0x10,0x26,0x46,0x00,0x00}, // % (37)
    {0x30,0x48,0x30,0x4A,0x44,0x3A,0x00,0x00}, // & (38)
    {0x30,0x30,0x10,0x00,0x00,0x00,0x00,0x00}, // ' (39)
    {0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}, // ( (40)
    {0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}, // ) (41)
    {0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00}, // * (42)
    {0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00}, // + (43)
    {0x00,0x00,0x00,0x00,0x30,0x30,0x10,0x00}, // , (44)
    {0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00}, // - (45)
    {0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00}, // . (46)
    {0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00}, // / (47)
    {0x3C,0x66,0x6E,0x76,0x66,0x66,0x3C,0x00}, // 0 (48)
    {0x18,0x38,0x18,0x18,0x18,0x18,0x7E,0x00}, // 1 (49)
    {0x3C,0x66,0x06,0x0C,0x30,0x60,0x7E,0x00}, // 2 (50)
    {0x3C,0x66,0x06,0x1C,0x06,0x66,0x3C,0x00}, // 3 (51)
    {0x0C,0x1C,0x3C,0x6C,0x7E,0x0C,0x0C,0x00}, // 4 (52)
    {0x7E,0x60,0x7C,0x06,0x06,0x66,0x3C,0x00}, // 5 (53)
    {0x1C,0x30,0x60,0x7C,0x66,0x66,0x3C,0x00}, // 6 (54)
    {0x7E,0x66,0x0C,0x18,0x18,0x18,0x18,0x00}, // 7 (55)
    {0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00}, // 8 (56)
    {0x3C,0x66,0x66,0x3E,0x06,0x0C,0x38,0x00}, // 9 (57)
    {0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00}, // : (58)
    {0x00,0x18,0x18,0x00,0x00,0x18,0x10,0x00}, // ; (59)
    {0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00}, // < (60)
    {0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00}, // = (61)
    {0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00}, // > (62)
    {0x3C,0x66,0x06,0x0C,0x18,0x00,0x18,0x00}, // ? (63)
    {0x3C,0x66,0x6E,0x6A,0x6E,0x60,0x3C,0x00}, // @ (64)
    {0x18,0x3C,0x66,0x66,0x7E,0x66,0x66,0x00}, // 'A' (65)
    {0x7C,0x66,0x66,0x7C,0x66,0x66,0x7C,0x00}, // 'B' (66)
    {0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x00}, // 'C'	67
    {0x78,0x6C,0x66,0x66,0x66,0x6C,0x78,0x00}, // 'D'	68
    {0x7E,0x60,0x60,0x7C,0x60,0x60,0x7E,0x00}, // 'E'	69
    {0x7E,0x60,0x60,0x7C,0x60,0x60,0x60,0x00}, // 'F'	70
    {0x3C,0x66,0x60,0x6E,0x66,0x66,0x3C,0x00}, // 'G'	71
    {0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00}, // 'H'	72
    {0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00}, // 'I'	73
    {0x06,0x06,0x06,0x06,0x06,0x66,0x3C,0x00}, // 'J'	74
    {0x66,0x6C,0x78,0x70,0x78,0x6C,0x66,0x00}, // 'K' 75
    {0x60,0x60,0x60,0x60,0x60,0x60,0x7E,0x00}, // 'L'	76
    {0x63,0x77,0x7F,0x6B,0x63,0x63,0x63,0x00}, // 'M' 77	
    {0x66,0x66,0x76,0x7E,0x6E,0x66,0x66,0x00}, // 'N' 78
    {0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, // 'O' 79
    {0x7C,0x66,0x66,0x7C,0x60,0x60,0x60,0x00}, // P (80)
    {0x3C,0x66,0x66,0x66,0x6E,0x6C,0x36,0x00}, // Q (81)
    {0x7C,0x66,0x66,0x7C,0x78,0x6C,0x66,0x00}, // R (82)
    {0x3C,0x66,0x60,0x3C,0x06,0x66,0x3C,0x00}, // S (83)
    {0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00}, // T (84)
    {0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, // U (85)
    {0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00}, // V (86)
    {0x63,0x63,0x63,0x6B,0x7F,0x77,0x63,0x00}, // W (87)
    {0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00}, // X (88)
    {0x66,0x66,0x66,0x3C,0x18,0x18,0x3C,0x00}, // Y (89)
    {0x7E,0x06,0x0C,0x18,0x30,0x60,0x7E,0x00},  // Z (90)
    {0x3C,0x30,0x30,0x30,0x30,0x30,0x3C,0x00}, // [ (91)
    {0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00}, // \ (92)
    {0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00}, // ] (93)
    {0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00}, // ^ (94)
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}, // _ (95)
    {0x30,0x18,0x0C,0x00,0x00,0x00,0x00,0x00}, // ` (96)
    {0x00,0x00,0x3C,0x06,0x3E,0x66,0x3E,0x00}, // a (97)
    {0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00}, // b (98)
    {0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00}, // c (99)
    {0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00}, // d (100)
    {0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00}, // e (101)
    {0x1C,0x30,0x30,0x7C,0x30,0x30,0x30,0x00}, // f (102)
    {0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x7C}, // g (103)
    {0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0x00}, // h (104)
    {0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00}, // i (105)
    {0x0C,0x00,0x0C,0x0C,0x0C,0x6C,0x6C,0x38}, // j (106)
    {0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0x00}, // k (107)
    {0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}, // l (108)
    {0x00,0x00,0x6C,0x7E,0x7E,0x6B,0x63,0x00}, // m (109)
    {0x00,0x00,0x7C,0x66,0x66,0x66,0x66,0x00}, // n (110)
    {0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00}, // o (111)
    {0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x60}, // p (112)
    {0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06}, // q (113)
    {0x00,0x00,0x6C,0x76,0x60,0x60,0x60,0x00}, // r (114)
    {0x00,0x00,0x3E,0x60,0x3C,0x06,0x7C,0x00}, // s (115)
    {0x10,0x30,0x7C,0x30,0x30,0x30,0x1C,0x00}, // t (116)
    {0x00,0x00,0x66,0x66,0x66,0x66,0x3E,0x00}, // u (117)
    {0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00}, // v (118)
    {0x00,0x00,0x63,0x63,0x6B,0x7F,0x36,0x000}, // w (119)
    {0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00}, // x (120)
    {0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x7C}, // y (121)
    {0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00}, // z (122)
    {0x0E,0x18,0x18,0x70,0x18,0x18,0x0E,0x00}, // { (123)
    {0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x000}, // | (124)
    {0x70,0x18,0x18,0x0E,0x18,0x18,0x70,0x00}, // } (125)
    {0x36,0x6C,0x00,0x00,0x00,0x00,0x00,0x00}  // ~ (126)
};


void max7219A_init(void);
void max7219A_display(char letter);
void max7219A_displayFrame(uint8_t frame[8]);
void max7219A_clear(void);
void max7219A_scrollText(const char *text, uint32_t delay_ms);
void max7219A_displayHeart(void);
void max7219A_displayHeartHalf(void);
void max7219A_blinkHeart(uint8_t times, uint32_t delay_ms);
void max7219A_start(uint16_t delay_ms);
void max7219A_end(uint16_t delay_ms);
void max7219A_intensity(uint8_t state, uint16_t delay_ms);
void max7219A_waveEffect(uint32_t delay_ms);			// Hieu ung song
void max7219A_waterDropEffect(uint32_t delay_ms);	// hieu ung nuoc mua
void max7219A_confess(void);

void max7219B_init(void);
void max7219B_pos_num(uint8_t pos, uint8_t number);
void max7219B_display_number_dot(char str[]);
void rotate_right_special(char str[]);
void max7219B_clear(void);
void max7219B_display_number_dot_fade(char str[]) ;
void max7219B_array_display(uint8_t* data);
void max7219B_array_display_undersocre();
void max7219B_intensity(uint8_t state, uint16_t delay_ms);
void max7219B_apper_underscore_start();
void max7219B_apper_underscore_end();



#endif